// Generated by BUCKLESCRIPT VERSION 4.0.5, PLEASE EDIT WITH CARE
'use strict';

var BTC = require("./BTC.bs.js");
var Types = require("./Types.bs.js");
var Utils = require("./Utils.bs.js");
var Belt_Set = require("bs-platform/lib/js/belt_Set.js");
var Belt_List = require("bs-platform/lib/js/belt_List.js");
var Json_decode = require("@glennsl/bs-json/src/Json_decode.bs.js");
var BitcoinjsLib = require("bitcoinjs-lib");

var testnetConfig_001 = /* network */BitcoinjsLib.networks.testnet;

var testnetConfig = /* record */[
  /* subdomain */"testnet.",
  testnetConfig_001
];

var mainnetConfig_001 = /* network */BitcoinjsLib.networks.bitcoin;

var mainnetConfig = /* record */[
  /* subdomain */"",
  mainnetConfig_001
];

function decodeUTXO(config, raw) {
  return /* record */[
          /* txId */Json_decode.field("tx_hash_big_endian", Json_decode.string, raw),
          /* txOutputN */Json_decode.field("tx_output_n", Json_decode.$$int, raw),
          /* address */BitcoinjsLib.address.fromOutputScript(Utils.bufFromHex(Json_decode.field("script", Json_decode.string, raw)), config[/* network */1]),
          /* amount */BTC.fromSatoshisFloat(Json_decode.field("value", Json_decode.$$float, raw)),
          /* confirmations */Json_decode.field("confirmations", Json_decode.$$int, raw)
        ];
}

function getUTXOs(config, addresses) {
  if (addresses) {
    return fetch("https://" + (config[/* subdomain */0] + ("blockchain.info/unspent?format=json&active=" + (Belt_List.reduceU(addresses, "", (function (res, address) {
                                  return res + ("|" + address);
                                })) + "&cors=true")))).then((function (prim) {
                      return prim.json();
                    })).then((function (raw) {
                    return Promise.resolve(Belt_Set.mergeMany(Types.emptyUtxoSet, Json_decode.field("unspent_outputs", (function (param) {
                                          return Json_decode.array((function (param) {
                                                        return decodeUTXO(config, param);
                                                      }), param);
                                        }), raw)));
                  })).catch((function () {
                  return Promise.resolve(Types.emptyUtxoSet);
                }));
  } else {
    return Promise.resolve(Types.emptyUtxoSet);
  }
}

var float_ = Json_decode.$$float;

exports.testnetConfig = testnetConfig;
exports.mainnetConfig = mainnetConfig;
exports.float_ = float_;
exports.decodeUTXO = decodeUTXO;
exports.getUTXOs = getUTXOs;
/* testnetConfig Not a pure module */
